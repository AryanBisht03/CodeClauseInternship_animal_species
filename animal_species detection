from tensorflow import keras
from keras.models import load_model
import cv2
import numpy as np
model=load_model("simple_animal_classification_model.h5")  #load model
#cap = cv2.VideoCapture("https://192.168.43.1:8080/video") # Define a video capture object and pass camera ip address as parameter
cap = cv2.VideoCapture(0)#input directly from webcam
all_classes={'bat': 0,
 'bear': 1,
 'buffalo': 2,
 'cat': 3,
 'cheetah': 4,
 'chimpanzee': 5,
 'cow': 6,
 'deer': 7,
 'dog': 8,
 'elephant': 9,
 'giraffe': 10,
 'hippopotamus': 11,
 'horse': 12,
 'kangaroo': 13,
 'lion': 14,
 'monkey': 15,
 'moose': 16,
 'panda': 17,
 'penguins': 18,
 'raccoon': 19,
 'rhinoceros': 20,
 'snake': 21,
 'tiger': 22,
 'tortoise': 23,
 'walrus': 24,
 'zebra': 25}
all_classes={'buffalo': 0, 'elephant': 1, 'rhino': 2, 'zebra': 3}
def get_key(val):  #return key for the given value from dictionary.
        for key, value in all_classes.items(): 
             if val == value: 
                 return key 
        return "key doesn't exist"
while(True):
    ret, frame = cap.read()  # Capture the video frame by frame
    if frame is None:
        continue
        
    test_image=frame.copy()
    
    test_image = cv2.resize(test_image,(32,32)) #make image size of (32,32) becasue our model is trained for that only.
    
    test_image = cv2.cvtColor(test_image, cv2.COLOR_BGR2GRAY)#grayscale conversion
    
    #since keras uses tensor flow and for tensorflow it needs 4d image so we converted 3d image to 4d image using above
    
    test_image = np.expand_dims(test_image,axis=0)
    test_image = np.expand_dims(test_image,axis=-1)
    
    #print(test_image.shape)
    #predict
    result = model.predict(test_image)
    #print(result[0])
    pred=list(result[0])
    
    for i in range(len(pred)):
        if pred[i]!=0:
            #print(get_key(i))
            cv2.putText(frame, get_key(i), (250,400), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,255,0), 2,) # Putting text in every frame
            cv2.imshow('frame',frame) #Display the resulting frame
            break
    
    if cv2.waitKey(1) & 0xFF == ord('q'):  # the 'q' button is set as the quitting button
        break
        
cap.release() # After the loop release the object
cv2.destroyAllWindows() # Destroy all the windows 
      
cap.release() # After the loop release the object
